name: Deploy Multi-Environment

on:
  push:
    branches: [main, dev]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref_name }}"
  cancel-in-progress: false

jobs:
  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare production build
        run: |
          mkdir -p build
          
          # Production: copy everything to root (excluding build directory)
          find . -maxdepth 1 -not -name '.' -not -name 'build' -not -name '.git' -not -name '.github' -exec cp -r {} build/ \;
          
          # Clean up development files for production
          rm -f build/test-*.html build/test-*.js build/*GUIDE.md build/setup.md
          
          # Note: We do NOT inject credentials into client-side code for security
          # Credentials are served via secure backend API endpoints only
          
          echo "‚úÖ Production environment created"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-development:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare development build
        run: |
          mkdir -p build
          
          # Copy all files including test files for development
          find . -maxdepth 1 -not -name '.' -not -name 'build' -not -name '.git' -not -name '.github' -exec cp -r {} build/ \;
          
          # Add development environment indicator
          cat > build/js/env-override.js << 'EOF'
          window.FORCE_DEV_MODE = true;
          console.log('üîß DEV environment active - deployed from dev branch');
          
          // Add development banner
          document.addEventListener('DOMContentLoaded', function() {
            const banner = document.createElement('div');
            banner.style.cssText = `
              position: fixed; top: 0; left: 0; right: 0; z-index: 10000;
              background: #ff6b35; color: white; text-align: center; padding: 8px;
              font-family: Arial, sans-serif; font-size: 14px; font-weight: bold;
              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            `;
            banner.innerHTML = 'üîß DEVELOPMENT ENVIRONMENT - Latest features and testing';
            document.body.insertBefore(banner, document.body.firstChild);
            
            // Adjust body padding to account for banner
            document.body.style.paddingTop = '40px';
            
            // Show dev test indicator
            const devIndicator = document.getElementById('devTestIndicator');
            if (devIndicator) {
              devIndicator.style.display = 'block';
            }
          });
          EOF
          
          # Update index.html for dev
          sed -i 's|<head>|<head><script src="js/env-override.js"></script>|' build/index.html
          sed -i 's|<title>|<title>[DEV] |' build/index.html
          
          echo "‚úÖ Development environment created with all test files"

      - name: Deploy to Netlify (Development)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './build'
          production-branch: never  # Never deploy as production
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from dev branch - ${{ github.sha }}"
          alias: dev-${{ github.sha }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        if: env.NETLIFY_AUTH_TOKEN != ''

      - name: Comment deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const netlifyConfigured = '${{ secrets.NETLIFY_AUTH_TOKEN }}' !== '';
            
            if (netlifyConfigured) {
              const deployUrl = `https://dev-${context.sha}--your-site-name.netlify.app`;
              github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `üîß **Development deployment ready!**\n\nüì± **Test URL:** ${deployUrl}\n\n*This is a temporary development deployment for testing. Production remains at the main GitHub Pages URL.*`
              });
            } else {
              github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `üîß **Development build completed!**\n\n‚úÖ **Status:** Development environment built successfully\nüìÅ **Build includes:** All test files and development tools\nüß™ **Test locally:** Download artifacts or test with local server\n\n*Note: Netlify not configured. To enable online dev deployments, configure Netlify secrets.*`
              });
            }

      - name: Upload development build as artifact
        uses: actions/upload-artifact@v3
        with:
          name: development-build-${{ github.sha }}
          path: './build'
          retention-days: 7